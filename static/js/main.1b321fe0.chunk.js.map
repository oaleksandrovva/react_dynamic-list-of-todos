{"version":3,"sources":["components/Form/Form.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["Form","handleChangeInput","changeEvent","value","target","onChangeQuery","props","handleChangeSelect","onChangeSelectedStatus","this","query","selectedStatus","className","type","name","placeholder","onChange","map","status","key","React","Component","TodoList","filteredTodos","selectedUser","id","title","userId","completed","checked","readOnly","onClick","defaultProps","CurrentUser","user","resetUser","email","phone","BASE_URL","request","url","options","fetch","then","response","ok","Error","statusText","json","result","data","App","state","todos","users","selectedUserId","changeQuery","setState","changeSelectedStatus","filterByQuery","filter","includes","toLowerCase","filterByStatus","selectUser","loadedTodos","filteredByQuery","a","Promise","all","prevProps","prevState","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b321fe0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Form.scss';\n\nexport class Form extends React.Component {\n  handleChangeInput = (changeEvent) => {\n    const { value } = changeEvent.target;\n\n    const { onChangeQuery } = this.props;\n\n    onChangeQuery(value);\n  }\n\n  handleChangeSelect = (changeEvent) => {\n    const { value } = changeEvent.target;\n\n    const { onChangeSelectedStatus } = this.props;\n\n    onChangeSelectedStatus(value);\n  }\n\n  render() {\n    const statusesOfTodos = ['All', 'Acive', 'Completed'];\n    const { query, selectedStatus } = this.props;\n\n    return (\n      <form className=\"form\">\n        <input\n          type=\"text\"\n          name=\"query\"\n          className=\"form__input\"\n          placeholder=\"title...\"\n          value={query}\n          onChange={this.handleChangeInput}\n        />\n        <select\n          value={selectedStatus}\n          name=\"selectedStatus\"\n          className=\"form__select\"\n          onChange={this.handleChangeSelect}\n        >\n          {statusesOfTodos.map(status => (\n            <option value={status} key={status}>\n              {status}\n            </option>\n          ))}\n        </select>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  query: PropTypes.string.isRequired,\n  selectedStatus: PropTypes.string.isRequired,\n  onChangeQuery: PropTypes.func.isRequired,\n  onChangeSelectedStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport const TodoList = ({ filteredTodos, selectedUser }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__list-container\">\n\n      <ul className=\"TodoList__list\">\n        {filteredTodos.map(({ id, title, userId, completed }) => (\n          <li\n            className={`TodoList__item\n              ${completed\n              ? 'TodoList__item--unchecked'\n              : 'TodoList__item--checked'}`}\n            key={id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={completed}\n                readOnly\n              />\n              <p>{title}</p>\n            </label>\n\n            <button\n              className={`TodoList__user-button button\n              ${completed\n                ? 'TodoList__user-button--selected'\n                : ''}`}\n              type=\"button\"\n              onClick={() => selectedUser(userId)}\n            >\n              User&nbsp;#\n              {userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })),\n  selectedUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  filteredTodos: 'no todo yet',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ user, resetUser }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:&nbsp;#\n        {user.id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n    <button\n      type=\"button\"\n      className=\"CurrentUser__clear\"\n      onClick={resetUser}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  resetUser: PropTypes.func.isRequired,\n};\n","// eslint-disable-next-line\nconst BASE_URL = `https://mate-api.herokuapp.com`;\n\nexport function request(url, options) {\n  return fetch(url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n\nexport function getTodos() {\n  return request(`${BASE_URL}/todos`)\n    .then(todos => todos.filter(({ id, title, userId, completed }) => (\n      id && title && userId && typeof (completed) === 'boolean'\n    )));\n}\n\nexport function getUsers() {\n  return request(`${BASE_URL}/users/`);\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Form } from './components/Form';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getUsers, getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    users: [],\n    filteredTodos: [],\n    selectedUserId: 0,\n    query: '',\n    selectedStatus: '',\n  };\n\n  async componentDidMount() {\n    const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n    this.setState({\n      todos,\n      users,\n      filteredTodos: todos,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.query !== this.state.query\n      || prevState.selectedStatus !== this.state.selectedStatus) {\n      this.loadedTodos();\n    }\n  }\n\n  changeQuery = (value) => {\n    this.setState({ query: value });\n  }\n\n  changeSelectedStatus = (value) => {\n    this.setState({ selectedStatus: value });\n  }\n\n  filterByQuery = (todos, query) => {\n    if (query) {\n      return todos.filter(({ title }) => (\n        title.includes(query.toLowerCase())\n      ));\n    }\n\n    return todos;\n  };\n\n  filterByStatus = (todos, selectedStatus) => {\n    switch (selectedStatus) {\n      case 'Acive':\n        return todos.filter(({ completed }) => !completed);\n\n      case 'Completed':\n        return todos.filter(({ completed }) => completed);\n\n      default:\n        return todos;\n    }\n  }\n\n  selectUser = (userId) => {\n    const { selectedUserId } = this.state;\n\n    if (selectedUserId !== userId) {\n      this.setState({ selectedUserId: userId });\n    }\n  }\n\n  resetUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  loadedTodos = () => {\n    const { todos, query, selectedStatus } = this.state;\n\n    const filteredByQuery\n      = this.filterByQuery(todos, query);\n    const filteredTodos\n      = this.filterByStatus(filteredByQuery, selectedStatus);\n\n    this.setState({ filteredTodos });\n  }\n\n  render() {\n    const {\n      users,\n      filteredTodos,\n      selectedUserId,\n      query,\n      selectedStatus,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <Form\n            query={query}\n            selectedStatus={selectedStatus}\n            onChangeQuery={this.changeQuery}\n            onChangeSelectedStatus={this.changeSelectedStatus}\n          />\n          <TodoList\n            filteredTodos={filteredTodos}\n            selectedUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId\n              ? (\n                <CurrentUser\n                  user={users.find(({ id }) => id === selectedUserId)}\n                  resetUser={this.resetUser}\n                />\n              )\n              : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}